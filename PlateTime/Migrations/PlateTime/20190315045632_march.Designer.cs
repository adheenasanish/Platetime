// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlateTimeApp.Models;

namespace PlateTimeApp.Migrations.PlateTime
{
    [DbContext(typeof(PlateTimeContext))]
    [Migration("20190315045632_march")]
    partial class march
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("PlateTimeApp.Models.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("PlateTimeApp.Models.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("PlateTimeApp.Models.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("PlateTimeApp.Models.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("PlateTimeApp.Models.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("PlateTimeApp.Models.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PlateTimeApp.Models.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PlateTimeApp.Models.FoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("food_category");
                });

            modelBuilder.Entity("PlateTimeApp.Models.PlateTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<bool?>("AllCommitted")
                        .HasColumnName("all_committed");

                    b.Property<bool?>("Isopen")
                        .HasColumnName("isopen");

                    b.Property<int?>("MaxMembers")
                        .IsRequired()
                        .HasColumnName("max_members");

                    b.Property<int?>("RestaurantGoerId")
                        .HasColumnName("restaurant_goer_id");

                    b.Property<int?>("RestaurantId")
                        .HasColumnName("restaurant_id");

                    b.Property<DateTime?>("Time")
                        .IsRequired()
                        .HasColumnName("time")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantGoerId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("plate_time");
                });

            modelBuilder.Entity("PlateTimeApp.Models.PlateTimeRestaurantGoer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("PlateTimeId")
                        .HasColumnName("plate_time_id");

                    b.Property<int?>("RestaurantGoerId")
                        .HasColumnName("restaurant_goer_id");

                    b.HasKey("Id");

                    b.HasIndex("PlateTimeId");

                    b.HasIndex("RestaurantGoerId");

                    b.ToTable("plate_time_restaurant_goer");
                });

            modelBuilder.Entity("PlateTimeApp.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<int?>("PriceCategory")
                        .HasColumnName("price_category");

                    b.Property<string>("StreetAddress")
                        .HasColumnName("street_address")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("Url")
                        .HasColumnName("url")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("restaurant");
                });

            modelBuilder.Entity("PlateTimeApp.Models.RestaurantFoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("FoodCategoryId")
                        .HasColumnName("food_category_id");

                    b.Property<int?>("RestaurantId")
                        .HasColumnName("restaurant_id");

                    b.HasKey("Id");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("restaurant_food_category");
                });

            modelBuilder.Entity("PlateTimeApp.Models.RestaurantGoer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(450)
                        .IsUnicode(false);

                    b.Property<int?>("PriceCategory")
                        .HasColumnName("price_category");

                    b.Property<string>("UserId")
                        .HasColumnName("user_id")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("restaurant_goer");
                });

            modelBuilder.Entity("PlateTimeApp.Models.RestaurantGoerFoodCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("FoodCategoryId")
                        .HasColumnName("food_category_id");

                    b.Property<int?>("RestaurantGoerId")
                        .HasColumnName("restaurant_goer_id");

                    b.HasKey("Id");

                    b.HasIndex("FoodCategoryId");

                    b.HasIndex("RestaurantGoerId");

                    b.ToTable("restaurant_goer_food_category");
                });

            modelBuilder.Entity("PlateTimeApp.Models.RestaurantGoerRestaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int?>("RestaurantGoerId")
                        .HasColumnName("restaurant_goer_id");

                    b.Property<int?>("RestaurantId")
                        .HasColumnName("restaurant_id");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantGoerId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("restaurant_goer_restaurant");
                });

            modelBuilder.Entity("PlateTimeApp.Models.AspNetRoleClaims", b =>
                {
                    b.HasOne("PlateTimeApp.Models.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PlateTimeApp.Models.AspNetUserClaims", b =>
                {
                    b.HasOne("PlateTimeApp.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PlateTimeApp.Models.AspNetUserLogins", b =>
                {
                    b.HasOne("PlateTimeApp.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PlateTimeApp.Models.AspNetUserRoles", b =>
                {
                    b.HasOne("PlateTimeApp.Models.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PlateTimeApp.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PlateTimeApp.Models.AspNetUserTokens", b =>
                {
                    b.HasOne("PlateTimeApp.Models.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PlateTimeApp.Models.PlateTime", b =>
                {
                    b.HasOne("PlateTimeApp.Models.RestaurantGoer", "RestaurantGoer")
                        .WithMany("PlateTime")
                        .HasForeignKey("RestaurantGoerId")
                        .HasConstraintName("FK__plate_tim__resta__72C60C4A");

                    b.HasOne("PlateTimeApp.Models.Restaurant", "Restaurant")
                        .WithMany("PlateTime")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK__plate_tim__resta__73BA3083");
                });

            modelBuilder.Entity("PlateTimeApp.Models.PlateTimeRestaurantGoer", b =>
                {
                    b.HasOne("PlateTimeApp.Models.PlateTime", "PlateTime")
                        .WithMany("PlateTimeRestaurantGoer")
                        .HasForeignKey("PlateTimeId")
                        .HasConstraintName("FK__plate_tim__plate__03F0984C");

                    b.HasOne("PlateTimeApp.Models.RestaurantGoer", "RestaurantGoer")
                        .WithMany("PlateTimeRestaurantGoer")
                        .HasForeignKey("RestaurantGoerId")
                        .HasConstraintName("FK__plate_tim__resta__04E4BC85");
                });

            modelBuilder.Entity("PlateTimeApp.Models.Restaurant", b =>
                {
                    b.HasOne("PlateTimeApp.Models.AspNetUsers", "User")
                        .WithMany("Restaurant")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__restauran__user___6D0D32F4");
                });

            modelBuilder.Entity("PlateTimeApp.Models.RestaurantFoodCategory", b =>
                {
                    b.HasOne("PlateTimeApp.Models.FoodCategory", "FoodCategory")
                        .WithMany("RestaurantFoodCategory")
                        .HasForeignKey("FoodCategoryId")
                        .HasConstraintName("FK__restauran__food___7D439ABD");

                    b.HasOne("PlateTimeApp.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantFoodCategory")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK__restauran__resta__7C4F7684");
                });

            modelBuilder.Entity("PlateTimeApp.Models.RestaurantGoer", b =>
                {
                    b.HasOne("PlateTimeApp.Models.AspNetUsers", "User")
                        .WithMany("RestaurantGoer")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__restauran__user___6FE99F9F");
                });

            modelBuilder.Entity("PlateTimeApp.Models.RestaurantGoerFoodCategory", b =>
                {
                    b.HasOne("PlateTimeApp.Models.FoodCategory", "FoodCategory")
                        .WithMany("RestaurantGoerFoodCategory")
                        .HasForeignKey("FoodCategoryId")
                        .HasConstraintName("FK__restauran__food___797309D9");

                    b.HasOne("PlateTimeApp.Models.RestaurantGoer", "RestaurantGoer")
                        .WithMany("RestaurantGoerFoodCategory")
                        .HasForeignKey("RestaurantGoerId")
                        .HasConstraintName("FK__restauran__resta__787EE5A0");
                });

            modelBuilder.Entity("PlateTimeApp.Models.RestaurantGoerRestaurant", b =>
                {
                    b.HasOne("PlateTimeApp.Models.RestaurantGoer", "RestaurantGoer")
                        .WithMany("RestaurantGoerRestaurant")
                        .HasForeignKey("RestaurantGoerId")
                        .HasConstraintName("FK__restauran__resta__00200768");

                    b.HasOne("PlateTimeApp.Models.Restaurant", "Restaurant")
                        .WithMany("RestaurantGoerRestaurant")
                        .HasForeignKey("RestaurantId")
                        .HasConstraintName("FK__restauran__resta__01142BA1");
                });
#pragma warning restore 612, 618
        }
    }
}
